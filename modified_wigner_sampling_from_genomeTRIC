
import numpy as np

from collections import OrderedDict

PeriodicTable = OrderedDict([("H", 1.007975), ("He", 4.002602), # First row
                             ("Li", 6.9675), ("Be", 9.0121831), ("B", 10.8135), ("C", 12.0106), ("N", 14.006855), ("O", 15.99940), ("F", 18.99840316), ("Ne", 20.1797), # Second row Li-Ne
                             ("Na", 22.98976928), ("Mg", 24.3055), ("Al", 26.9815385), ("Si", 28.085), ("P", 30.973762), ("S", 32.0675), ("Cl", 35.4515), ("Ar", 39.948), # Third row Na-Ar
                             ("K", 39.0983), ("Ca", 40.078), ("Sc", 44.955908), ("Ti", 47.867), ("V", 50.9415), ("Cr", 51.9961), ("Mn", 54.938044), ("Fe", 55.845), ("Co", 58.933194), # Fourth row K-Kr
                             ("Ni", 58.6934), ("Cu", 63.546), ("Zn", 65.38), ("Ga", 69.723), ("Ge", 72.63), ("As", 74.921595), ("Se", 78.971), ("Br", 79.904), ("Kr", 83.798),
                             ("Rb", 85.4678), ("Sr", 87.62), ("Y", 88.90584), ("Zr", 91.224), ("Nb", 92.90637), ("Mo", 95.95), ("Tc", 98.), ("Ru", 101.07), ("Rh", 102.9055), # Fifth row Rb-Xe
                             ("Pd", 106.42), ("Ag", 107.8682), ("Cd", 112.414), ("In", 114.818), ("Sn", 118.71), ("Sb", 121.76), ("Te", 127.6), ("I", 126.90447), ("Xe", 131.293),
                             ("Cs", 132.905452), ("Ba", 137.327), ("La", 138.90547), ("Ce", 140.116), ("Pr", 140.90766), ("Nd", 144.242), ("Pm", 145.), ("Sm", 150.36), # Sixth row Cs-Rn
                             ("Eu", 151.964), ("Gd", 157.25), ("Tb", 158.92535), ("Dy", 162.5), ("Ho", 164.93033), ("Er", 167.259), ("Tm", 168.93422), ("Yb", 173.054),
                             ("Lu", 174.9668), ("Hf", 178.49), ("Ta", 180.94788), ("W", 183.84), ("Re", 186.207), ("Os", 190.23), ("Ir", 192.217), ("Pt", 195.084),
                             ("Au", 196.966569), ("Hg", 200.592), ("Tl", 204.3835), ("Pb", 207.2), ("Bi", 208.9804), ("Po", 209.), ("At", 210.), ("Rn", 222.),
                             ("Fr", 223.), ("Ra", 226.), ("Ac", 227.), ("Th", 232.0377), ("Pa", 231.03588), ("U", 238.02891), ("Np", 237.), ("Pu", 244.), # Seventh row Fr-Og
                             ("Am", 241.), ("Cm", 243.), ("Bk", 247.), ("Cf", 249.), ("Es", 252.), ("Fm", 257.), ("Md", 258.), ("No", 259.),
                             ("Lr", 262.), ("Rf", 267.), ("Db", 268.), ("Sg", 271.), ("Bh", 272.), ("Hs", 270.), ("Mt", 276.), ("Ds", 281.),
                             ("Rg", 280.), ("Cn", 285.), ("Nh", 284.), ("Fl", 289.), ("Mc", 288.), ("Lv", 293.), ("Ts", 292.), ("Og", 294.)])

import matplotlib.pyplot as plt

# Chosen parameters
# scale = 0.3  #spread of random numbers generated, ie. how large are the vibrations
# a = .05  # Parameter 'a' for the Gaussian, ie. spread of the gaussian dist. around each wavelength, lower a value = more spread
# padding = 50  # How many units (nm) the x axis of the graph will be to the right and left of the highest(most right) and lowest(most left) wavelength x-values.

# Constants
SPEED_OF_LIGHT = 299792458  # in meters per second
PLANCK_CONSTANT = 4.1356677e-15  # in eV*s

from tkinter import *
from tkinter import filedialog

def openFile():
    filepath = filedialog.askopenfilename(initialdir="C:\\Users\\Cakow\\PycharmProjects\\Main",
        title="Open file okay?",
        filetypes= (("text files","*.txt"),
        ("all files","*.*")))
    file = open(filepath,'r')
    print(file.read())
    print(filepath)
    return filepath



def parse_molden_for_vibration_data(data):
    #Creates lists to put the geometry and vibration data into
    original_geometry = []
    vibrations = []
    freqs_wavenumber = []

    #Splits file into lines based on line endings
    lines = data.split('\n')

    #Creates a list to store the atomic symbols
    atomic_symbols = []

    #Adds geometry, vibration data, and atomic symbols into respective lists based on header name
    section = None
    number_of_xyz_points = 0
    for line in lines:
        line = line.strip()
        if line.startswith("[FREQ]"):
            section = "FREQ"
        if line.startswith("[FR-COORD]"):
            section = "FR-COORD"
        elif line.startswith("[FR-NORM-COORD]"):
            section = "FR-NORM-COORD"
        elif section == "FREQ":
            values = line.split()
            for x in values:
                try:
                    float(x)
                    freqs_wavenumber.append(float(x))
                except (ValueError, TypeError) as e:
                    break
        elif section == "FR-COORD":
            values = line.split()
            if len(values) >= 4:
                for x in values[0]:
                    atomic_symbols.append(x)
                for x in values[1:]:
                    number_of_xyz_points += 1
                    original_geometry.append(float(x))
        elif section == "FR-NORM-COORD":
            values = line.split()
            if len(values) >= 3:
                for x in values:
                    vibrations.append(float(x))
    #print(f"freqs_wavenumber is \n{freqs_wavenumber}")

    #bohr to angstrom conversion

    #original_geometry = np.array(original_geometry) * 0.529177    #Did this again at the end of wigner sample

    return original_geometry, vibrations, atomic_symbols, number_of_xyz_points, freqs_wavenumber

def wigner_sample(coords, elem, freqs_wavenumber, normal_modes, temperature, n_samples):

    mass = []
    
    for ix in elem:
        mass.append(float(PeriodicTable[ix]))

    mass = np.array(mass)
    #print(f"\n mass is:\n {mass}\n") #mass is good. in amu as they should
    nAtoms = len(mass)
    coords = np.array(coords)
    coords = coords.reshape(-1, 3)
    #print(f"\ncoords is \n{coords}") #coords are good. in au as they should be.
    #print(f"\nsanity check - nAtoms is {nAtoms}\n")
    assert coords.shape[0] == nAtoms

    cm2au = .00000455633525012   #correct, cm^-1 to au, verified
    amu2au = 1836.15267343   # Had 1 / 1836.15267343 before. This might have been it all along :/
    #print(f"amu2au is: {amu2au}")
    freqs_wavenumber = np.array(freqs_wavenumber)
    #print(f"freqs_wavenumber is: \n{freqs_wavenumber}\n") #freq's are almost identical to those in psi4 calc, which are correctly in cm^-1
    # convert frequency to a.u.
    freq_au = freqs_wavenumber* cm2au  #it is cm^-1 to au, and correct
    mass_au = np.array(mass)* amu2au   #now this step is correct :/
    au2joule = 1000 * 2625.4996394798254 / 6.02214076e23 #correct, have to times kj conv by 1000 and divide by Na, and this is the way it is in og genomeTRIC code (normal modes.py)
    kb_si = 1.380649e-23 #how it is in nifty, correct.
    
    #  print(f" is: {}")  #check
    #print(f"au2joule is: {au2joule}\n")
    #print(f"kb_si is: {kb_si}\n")

    # beta = k_B*T
    #if temperature != 0:     #idk why i did all this extra stuff
    #    beta = 1.0 /( kb_si / au2joule * temperature); # 1/( J/K /(au/J) * K) = 1/au
    #if temperature == 0:
    #    beta = 1e99

    beta = 1.0 /( kb_si / au2joule * temperature);


    nmodes = len(freq_au)
    ZPE = 0.5*np.sum(freq_au)

    # Total mass
    totmass = np.sum(mass)
    # Compute the center of mass
    cxyz = np.sum(coords * mass[:, np.newaxis], axis=0)/totmass
    
    # Coordinates in the center-of-mass frame
    #print(f"cxyz is \n{cxyz}")
    ctr_coors = coords - cxyz[np.newaxis, :]  #essentially the same as original cooords

    #print(f"ctr_coors is (center of mass frame, little difference from original geometry) \n{ctr_coors}\n")
    # how to test imaginary frequency

    # Create a st. dev/scale for each normal mode based on temperature (beta is based on temperature) and frequency #######################################################################################################################

    sigma_x = []
    sigma_p = []
    for n in range(nmodes):
        freq = freq_au[n]
        # Temporary (probably not correct) hack for imaginary freqs.
        if freq < 0.0: freq *= -1
        if temperature ==0:
            tanhf = 1.0
        else:
            tanhf = np.tanh(freq*0.5*beta)   #beta includes temp^-1, so higher temps mean smaller beta and smaller tanhf
            #if n==0:
            #    print(f"tanhf[0] is {tanhf}")
            #if n==10:
            #    print(f"tanhf[10] is {tanhf}\n")
        # f= 0.5* beta* hbar* omega
        # position: exp( -tanh(f)* m* omega/hbar * q^2)
        sigma_x2 = 0.5/(freq*tanhf)    #sigma_x2 has units of 1/au     #higher temp = lower tanhf = = higher sigma_x = larger dist.
        #interesting how larger frequencies are actually result smaller(less displacement) normal modes, makes sense since wavelength and frequency are inverse.
        sigma_x.append(np.sqrt(sigma_x2)) #so units of 1/sqrt(au) ? Yes
        # momentum: exp( -tanh(f)/(hbar*m*omega)* p^2)
        sigma_p2 = 0.5*(freq/tanhf)    #sigma_p2 has units au
        sigma_p.append(np.sqrt(sigma_p2)) #so units of sqrt(au)? Yes
    #print("sigma_x\n", sigma_x )
    #print("\n")
    #print("sigma_p\n", sigma_p,)
    #print("\n")

    sample_data = []
    ovr_idx = []
    #################

    ##############
    #important

    #Applying mass-weights, not required anymore because im recieving mass weighted normal coords from genomeTRICs frequency_analysis
    #Now required, going back to psi4 norm cords

    normal_modes = np.array(normal_modes)
    normal_modes = np.array(normal_modes).reshape(-1,nAtoms*3)

    #print(f"normal mode before changes are: {normal_modes}")

    multiply_first_6 = np.sqrt(12.0106)   # * amu2au (mass weighted in geomeTRIC with amu mass not au)
    multiply_last_12 = np.sqrt(1.007975)    # * amu2au

    #print(f"multiply_last_12: {multiply_last_12}, multiply_first_6: {multiply_first_6}")
    # multiply the first 6 elements of each set by the first divider
    normal_modes[:, :6] *= multiply_first_6

    # multiply the last 12 elements of each set by the second divide
    normal_modes[:, 6:] *= multiply_last_12

    #print(f"normal modes are: {normal_modes}")

    for idx in range(1):
        xvec = np.zeros(nAtoms*3)
        pvec = np.zeros(nAtoms*3)
        # print(f"nmodes is {nmodes}\n")
        # apply random displacement
        for n in range(nmodes):
            xlen = np.random.normal(0.0, sigma_x[n])
            plen = np.random.normal(0.0, sigma_p[n])
            #xlen = np.array(xlen)  #check #important testing this rn #this line was useless
            re_xvec = xvec.reshape(-1,3)
            # if n ==0:
                # print(f"xvec[0] is \n{re_xvec}\n xlen[0] is \n{xlen}\n normal_modes[0] is \n{normal_modes[n]}\n")
            #if n ==5:
                # print(f"6th vibration calculation - xvec[5] is \n{re_xvec}\n xlen[5] is \n{xlen}\n normal_modes[5] is \n{normal_modes[5]}\n")
            # if n ==10:
                # print(f"xvec[10] is \n{re_xvec}\n xlen[10] is \n{xlen}\n normal_modes[10] is \n{normal_modes[10]}\n")

            #xlen = np.random.normal(0.0, .1)  #test for other parts of code, always keep hashtagged
            xvec += xlen* normal_modes[n]
            pvec += plen* normal_modes[n]
        re_xvec = xvec.reshape(-1,3)
        # print(f"xvec is \n{re_xvec}")
        # print(f"pvec is \n{pvec}\n")
        # undo mass-weights have to use q = wfn.frequency_analysis not NORMAL_MODES_WRITE for mass-weighted normal modes
        # print(f"mass_au is \n{mass_au}\n")
        #IMPORTANT
        for a in range(nAtoms):
            smass = np.sqrt(mass_au[a])
            for ix in range(3):
                xvec[a*3+ix] /= smass
                pvec[a*3+ix] *= smass


        # generate coordinates
        xvec = np.reshape(xvec, (nAtoms, 3))
        #print(f"xvec before adding ctr_coors is: {xvec}")
        coors = xvec + ctr_coors    #ctr_coors is just the original coors. xvec is the change that we are applying, which could be useful to print to make analyzing easier i guess.

        # remove COM and generate velocity/momenta
        totmass = 0
        vel_com = np.zeros(3)
        for a in range(nAtoms):
            totmass += mass_au[a]
            for ix in range(3):
                vel_com[ix] += pvec[a*3+ix]  
        vel_com /= totmass

        velos = np.zeros((nAtoms, 3))
        momenta = np.zeros((nAtoms, 3))
        for a in range(nAtoms):
            smass = mass_au[a]
            for ix in range(3):
                velos[a,ix] = pvec[a*3+ix]/ smass - vel_com[ix]
                momenta[a,ix] = velos[a,ix]*mass_au[a] 

        EKin = 0.0
        for a in range(nAtoms):
            for ix in range(3):
                EKin += mass_au[a]* velos[a,ix]* velos[a,ix] 
        EKin *= 0.5

        #print(f"momenta is \n{momenta}")
        #print(f"coors is \n{coors}\n")
        #print(f"coors (wigner result) is (before converting to angstrom): {coors}")
        coors = coors * 0.529177    #necessary step, included at the end of og wigner in normal_modes.py, but with the Molecule() class stuff
        #print(f"coors (wigner result) is (after converting to angstrom): {coors}")
        #print(f"vibrations at the end of wigner is {normal_modes}")
        return(coors)

#parameters

# coords= [0.0000114210,        1.2473986659,        0.0000000000,
# -0.0000117076,       -1.2473984820,        0.0000000000,
# -1.7419358253,       2.3241124681,       0.0000000000,
# 1.7419808041,     2.3240853077,     0.0000000000,
# 1.7419344747,   -2.3241154839,    0.0000000000,
# -1.7419760413,   -2.3240844816,    0.0000000000]

# mass=[12, 12, 1, 1, 1, 1]

elem= ['C', 'C', 'H', 'H', 'H', 'H']

# freqs_wavenumber=[            
#             885.0664443530,
#             1072.0963859237,
#             1098.3511682319,
#             1137.8460086627,
#             1326.6889211736,
#             1463.6853400160,
#             1568.4429529127,
#             1838.0699174839,
#             3287.9214886014,
#             3312.3886730882,
#             3380.5103624417,
#             3402.9480453944]

# normal_modes = [[-0.020903320191182, 8.99071723e-08, -0.0], [-0.0209038846642879, 1.440948971e-07, 0.0], [0.1244500583475754, 0.2330256353334151, 0.0], [0.12444476266166561, -0.23302564464693032, 0.0], [0.1244501145461728, 0.2330259192897933, -0.0], [0.124446289972323, -0.23302869614610078, 0.0], [0.0, -0.0, -0.0441287568488283], [0.0, 0.0, -0.0441371399121092], [-0.0, -0.0, 0.2627356208664165], [-0.0, 0.0, 0.2627211926967584], [-0.0, -0.0, 0.2627619623449579], [-0.0, 0.0, 0.2627481352674541], [-0.0, -0.0, 0.0808516106729386], [-0.0, -0.0, -0.0808456349945838], [0.0, 0.0, -0.2583764965416877], [0.0, -0.0, -0.258336246227796], [0.0, 0.0, 0.2583006971223723], [0.0, -0.0, 0.2583408938835516], [-0.0, -0.0, 5.1167182484e-06], [-0.0, -0.0, -3.0703907894e-06], [0.0, 0.0, 0.2645692052011437], [-0.0, 0.0, -0.26460732970519096], [0.0, 0.0, 0.2645956113451145], [0.0, -0.0, -0.2645818521610198], [0.0809923675215226, -4.917641861000001e-07, -0.0], [-0.080992187178001, 9.791362031e-07, 0.0], [-0.0731026639482953, -0.2477603333617324, 0.0], [-0.07309566050237111, 0.24775723487164428, 0.0], [0.0730997398220287, 0.2477549121021205, -0.0], [0.0730964374929602, -0.2477576163553436, 0.0], [6.993603232e-07, 0.0503458568108276, -0.0], [-5.985521047000001e-07, -0.0503456455633692, -0.0], [0.1044651694495145, 0.24046977176680698, -0.0], [-0.1044616375105457, 0.2404739221549357, 0.0], [-0.1044668486339709, -0.2404723431436854, -0.0], [0.10446211689199, -0.2404738658505029, 0.0], [1.234569941e-07, -0.036352568198060396, -0.0], [-6.923751868000001e-07, -0.0363530653598519, 0.0], [0.1500255946689522, 0.2164211019116564, -0.0], [-0.1500227581743968, 0.21642696974373862, 0.0], [0.1500259947267642, 0.21642212227074778, -0.0], [-0.1500220572794603, 0.2164233290588963, 0.0], [1.289075172e-06, 0.1661296660868504, 0.0], [-1.4232744592000001e-06, -0.16612951548307622, 0.0], [-0.20582931886860972, -0.11765034662672941, 0.0], [0.2058284823985258, -0.11765569062649929, -0.0], [0.2058295842508752, 0.1176505303040661, 0.0], [-0.2058271500895929, 0.11765371409748661, -0.0], [4.2862278646e-06, 0.0226474442435857, 0.0], [-1.0109926585000001e-06, 0.022635521832858, 0.0], [0.2271333056899302, -0.1348071730873791, -0.0], [-0.2271845065280714, -0.1348337588340237, 0.0], [0.2270775135004662, -0.1347743095552304, -0.0], [-0.2270653103084223, -0.13476127756616912, 0.0], [5.4747064889e-06, 0.0307428298148686, -0.0], [9.2605975e-09, -0.0307519093809169, -0.0], [0.2256170378981662, -0.1363238814719133, 0.0], [-0.22568143312979, -0.1363587180934242, -0.0], [-0.22574040403257528, 0.1363984413999416, 0.0], [0.22573950220913191, 0.13639226664519938, -0.0], [-0.0374398027207655, 4.1071543678e-06, 0.0], [0.0374241979789656, -6.707847651999999e-07, 0.0], [0.2237502757001523, -0.13889225304829492, -0.0], [0.2236877041183059, 0.1388492990632748, 0.0], [-0.2236230301691562, 0.13881415287321888, -0.0], [-0.2236291466615107, -0.1388121152242627, 0.0], [-0.0375109921617277, 3.5576040533e-06, -0.0], [-0.037526543827074495, -1.0353348004999998e-06, 0.0], [0.22334351596728272, -0.1393137547527836, -0.0], [0.2232932164763256, 0.1392780590124132, 0.0], [0.2234021532239695, -0.1393510106657031, -0.0], [0.22342020017054212, 0.13935667381212172, -0.0]]
# temperature= 293
# n_samples=10

def startingquestions():

    #Default data if user doesn't want to choose their own file

    default_data = """[Molden Format]

[FREQ]
         883.7652432200
        1072.6854127784
        1079.6052741993
        1135.3360309030
        1327.7086226782
        1468.7188417336
        1566.0338085148
        1833.9625089437
        3289.8226941523
        3314.8628267721
        3373.5456732585
        3401.1871472784

[FR-COORD]
C          0.0000115513        1.2473987562       -0.0000000000
C         -0.0000115773       -1.2473985723       -0.0000000000
H         -1.7419358212        2.3241126364       -0.0000000000
H          1.7419810606        2.3240854761       -0.0000000000
H         -1.7419774484       -2.3240833537        0.0011817495
H          1.7419325181       -2.3241169483       -0.0011817484

[FR-NORM-COORD]
vibration 1
          -0.0396434127        0.0000000801        0.0000123975
          -0.0396444799        0.0000002405        0.0000144966
           0.2360209833        0.4398962175       -0.0001885425
           0.2360111102       -0.4398965592       -0.0001885400
           0.2360129574       -0.4399012628        0.0000284311
           0.2360223030        0.4398977879        0.0000284283
vibration 2
           0.0000125718       -0.0000000015       -0.0833693962
          -0.0000691546        0.0000000019       -0.0834290228
           0.0000385309       -0.0000009285        0.4964363998
           0.0000385268        0.0000009272        0.4963934455
           0.0002983195       -0.0000008619        0.4965837510
           0.0002983448        0.0000008577        0.4966266027
vibration 3
           0.0000394307        0.0000000009        0.1528031249
          -0.0000641956       -0.0000000005       -0.1527604851
          -0.0000918471       -0.0001644461       -0.4883347577
          -0.0000918396        0.0001644465       -0.4882976728
           0.0002392914        0.0001644454        0.4880803471
           0.0002392667       -0.0001644515        0.4880443791
vibration 4
           0.0000000000       -0.0000333084        0.0000068723
           0.0000000014        0.0000333084       -0.0000006578
           0.0000455838       -0.0000183248        0.4999693747
          -0.0000455905       -0.0000183190       -0.5000297410
          -0.0002936195        0.0000183276       -0.5000071652
           0.0002936100        0.0000183153        0.4999935370
vibration 5
           0.1538613514       -0.0000012690       -0.0000359035
          -0.1538609953        0.0000018306        0.0000684759
          -0.1415997573       -0.4670337843       -0.0000489297
          -0.1415863872        0.4670267667       -0.0000489310
           0.1415856993       -0.4670253571       -0.0001449865
           0.1415962051        0.4670256881       -0.0001449865
vibration 6
           0.0000017050        0.0934435061       -0.0000000000
          -0.0000015714       -0.0934430740        0.0000000002
           0.1986067432        0.4540760701        0.0000355900
          -0.1986001456        0.4540852614       -0.0000355914
           0.1986014306       -0.4540867994       -0.0001703261
          -0.1986096196       -0.4540796776        0.0001703250
vibration 7
          -0.0000000595       -0.0688638262        0.0000000001
          -0.0000009978       -0.0688647914       -0.0000000000
           0.2820438008        0.4099740137        0.0000000001
          -0.2820384609        0.4099842049       -0.0000000008
          -0.2820370423        0.4099793502        0.0001913367
           0.2820442917        0.4099734848       -0.0001913372
vibration 8
           0.0000023206        0.3186945233        0.0000000001
          -0.0000025694       -0.3186942407       -0.0000000001
          -0.3879113403       -0.2207732364        0.0001536706
           0.3879096636       -0.2207836273       -0.0001536710
          -0.3879072172        0.2207811621        0.0001094882
           0.3879118564        0.2207723362       -0.0001094883
vibration 9
           0.0000082180        0.0425575477       -0.0000000005
           0.0000008641        0.0425354647       -0.0000000002
           0.4300742096       -0.2533203099       -0.0000000030
          -0.4301727069       -0.2533722052        0.0000000069
          -0.4299638793       -0.2532449602        0.0002916927
           0.4299542377       -0.2532504451       -0.0002916890
vibration 10
           0.0000120904        0.0573725793       -0.0000000006
          -0.0000048014       -0.0573894953        0.0000000028
           0.4267925785       -0.2569458201       -0.0000255853
          -0.4269364058       -0.2570262198        0.0000255915
           0.4270632291        0.2570989489       -0.0002641297
          -0.4270061906        0.2570745071        0.0002640973
vibration 11
          -0.0698032748        0.0000097014        0.0000029763
           0.0697794288       -0.0000049491       -0.0000443640
           0.4214937620       -0.2647206462       -0.0000197051
           0.4213496814        0.2646241203       -0.0000196993
          -0.4212565274       -0.2645640708        0.0002660861
          -0.4213029865        0.2646040114        0.0002661152
vibration 12
          -0.0707972792        0.0000063253        0.0000049975
          -0.0708207814        0.0000003383        0.0000430466
           0.4215321727       -0.2641551924       -0.0000150521
           0.4214371828        0.2640882657       -0.0000150495
           0.4216249660        0.2642051320       -0.0002709717
           0.4216276645       -0.2642175474       -0.0002709795

            """

    #Gives user option to choose their own file
    user_choice = 'y'
    user_choice = input("Do you want to provide your own file for vibration data? (in molden normal modes format) (y/n): ").strip().lower()
    
    if user_choice == '':
        user_choice = 'y'

    if user_choice == 'y':
        user_file_path = openFile()
        with open(user_file_path, 'r') as file:
            data = file.read()
    else:
        data = default_data

    temperature = input("\n Enter the temperature of the molecule in Kelvin (press enter for 273.15 K): ")
    if temperature == "":
        temperature = 273.15
    else:
        temperature = float(temperature)
    print("\n")

    return data, temperature

# Now the contents of the file are stored in the variable "data"

data, temperature = startingquestions()
original_geometry, vibrations, atomic_symbols, number_of_xyz_points, freqs_wavenumber = parse_molden_for_vibration_data(data)
# print(f"original geometry is: {original_geometry}")

num_samples = input("Enter the number of samples you want to generate: ")

if num_samples == '':
    num_samples = 5
else:
    num_samples = int(num_samples)

print("\n")
#important


vibrations = np.array(vibrations)

#The 
#vibrations = vibrations / 1822.888

vibrations = vibrations.flatten().tolist()

#vibrations = frequency_analysis(coords, Hessian)

def num_samples_psi4():
    #This lets you iterate the modify_geometry function over multiple samples
        #final_modified_geometry = modify_geometry(original_geometry, vibrations, atomic_symbols, scale)

        final_modified_geometry = wigner_sample(original_geometry, atomic_symbols, freqs_wavenumber, vibrations, temperature, num_samples)
        final_modified_geometry = final_modified_geometry.flatten().tolist()

        list_modified_geometry_with_atomic_symbols = [str(atomic_symbols[0])]

        # match atomic symbols to their xyz coordinates, adding the atomic symbol after every three numbers
        for i in range(0, len(final_modified_geometry), 3):
            list_modified_geometry_with_atomic_symbols += final_modified_geometry[i:i+3]
            if i//3 + 1 < len(atomic_symbols):
                list_modified_geometry_with_atomic_symbols.append(atomic_symbols[i//3 + 1])

        #Format the geometry into the format that psi4.geometry accepts
        modified_geometry_for_psi4 = ""
        for i, item in enumerate(list_modified_geometry_with_atomic_symbols):
            modified_geometry_for_psi4 += str(item)
            if (i + 1) % 4 == 0:  
                # Add newline after every four elements (1 atomic symbol and 3 xyz coordinate numbers)
                modified_geometry_for_psi4 += "\n"
            else:
                modified_geometry_for_psi4 += " "  # Add space between elements
        return(modified_geometry_for_psi4, modified_geometry_for_psi4)

file_paths = []
geometry_list = {}

for i in range(num_samples):
    file_paths.append(f'C:/Users/mesfi/miniconda3/envs/210A/0_inputs_and_outputs/Photoisomerization_phytochrome/4...ethylene_tdscf_quick_with_python{i}.out')

    def geometry():
        geo, geometry = num_samples_psi4()
        geometry_list[i] = geometry
        return geometry

    geometry()

    print(f"modified geometry for run {i+1} out of {num_samples} is:")
    print(geometry_list[i])
